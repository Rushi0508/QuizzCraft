//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuizzCraftClient.QuestionServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/QuizzCraftService.Models")]
    [System.SerializableAttribute()]
    public partial class Question : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorrectAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuizIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CorrectAnswer {
            get {
                return this.CorrectAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.CorrectAnswerField, value) != true)) {
                    this.CorrectAnswerField = value;
                    this.RaisePropertyChanged("CorrectAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionA {
            get {
                return this.OptionAField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionAField, value) != true)) {
                    this.OptionAField = value;
                    this.RaisePropertyChanged("OptionA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionB {
            get {
                return this.OptionBField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionBField, value) != true)) {
                    this.OptionBField = value;
                    this.RaisePropertyChanged("OptionB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionC {
            get {
                return this.OptionCField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionCField, value) != true)) {
                    this.OptionCField = value;
                    this.RaisePropertyChanged("OptionC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionD {
            get {
                return this.OptionDField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionDField, value) != true)) {
                    this.OptionDField = value;
                    this.RaisePropertyChanged("OptionD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionID {
            get {
                return this.QuestionIDField;
            }
            set {
                if ((this.QuestionIDField.Equals(value) != true)) {
                    this.QuestionIDField = value;
                    this.RaisePropertyChanged("QuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionText {
            get {
                return this.QuestionTextField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionTextField, value) != true)) {
                    this.QuestionTextField = value;
                    this.RaisePropertyChanged("QuestionText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuizId {
            get {
                return this.QuizIdField;
            }
            set {
                if ((this.QuizIdField.Equals(value) != true)) {
                    this.QuizIdField = value;
                    this.RaisePropertyChanged("QuizId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuestionServiceReference.IQestionService")]
    public interface IQestionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/AddQuestion", ReplyAction="http://tempuri.org/IQestionService/AddQuestionResponse")]
        string AddQuestion(QuizzCraftClient.QuestionServiceReference.Question question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/AddQuestion", ReplyAction="http://tempuri.org/IQestionService/AddQuestionResponse")]
        System.Threading.Tasks.Task<string> AddQuestionAsync(QuizzCraftClient.QuestionServiceReference.Question question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/GetAllQuestionsByQuiz", ReplyAction="http://tempuri.org/IQestionService/GetAllQuestionsByQuizResponse")]
        QuizzCraftClient.QuestionServiceReference.Question[] GetAllQuestionsByQuiz(int quizId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/GetAllQuestionsByQuiz", ReplyAction="http://tempuri.org/IQestionService/GetAllQuestionsByQuizResponse")]
        System.Threading.Tasks.Task<QuizzCraftClient.QuestionServiceReference.Question[]> GetAllQuestionsByQuizAsync(int quizId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/GetQuestionById", ReplyAction="http://tempuri.org/IQestionService/GetQuestionByIdResponse")]
        QuizzCraftClient.QuestionServiceReference.Question GetQuestionById(int questionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/GetQuestionById", ReplyAction="http://tempuri.org/IQestionService/GetQuestionByIdResponse")]
        System.Threading.Tasks.Task<QuizzCraftClient.QuestionServiceReference.Question> GetQuestionByIdAsync(int questionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/UpdateQuestion", ReplyAction="http://tempuri.org/IQestionService/UpdateQuestionResponse")]
        string UpdateQuestion(QuizzCraftClient.QuestionServiceReference.Question question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/UpdateQuestion", ReplyAction="http://tempuri.org/IQestionService/UpdateQuestionResponse")]
        System.Threading.Tasks.Task<string> UpdateQuestionAsync(QuizzCraftClient.QuestionServiceReference.Question question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/DeleteQuestion", ReplyAction="http://tempuri.org/IQestionService/DeleteQuestionResponse")]
        void DeleteQuestion(int questionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQestionService/DeleteQuestion", ReplyAction="http://tempuri.org/IQestionService/DeleteQuestionResponse")]
        System.Threading.Tasks.Task DeleteQuestionAsync(int questionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQestionServiceChannel : QuizzCraftClient.QuestionServiceReference.IQestionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QestionServiceClient : System.ServiceModel.ClientBase<QuizzCraftClient.QuestionServiceReference.IQestionService>, QuizzCraftClient.QuestionServiceReference.IQestionService {
        
        public QestionServiceClient() {
        }
        
        public QestionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QestionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QestionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QestionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddQuestion(QuizzCraftClient.QuestionServiceReference.Question question) {
            return base.Channel.AddQuestion(question);
        }
        
        public System.Threading.Tasks.Task<string> AddQuestionAsync(QuizzCraftClient.QuestionServiceReference.Question question) {
            return base.Channel.AddQuestionAsync(question);
        }
        
        public QuizzCraftClient.QuestionServiceReference.Question[] GetAllQuestionsByQuiz(int quizId) {
            return base.Channel.GetAllQuestionsByQuiz(quizId);
        }
        
        public System.Threading.Tasks.Task<QuizzCraftClient.QuestionServiceReference.Question[]> GetAllQuestionsByQuizAsync(int quizId) {
            return base.Channel.GetAllQuestionsByQuizAsync(quizId);
        }
        
        public QuizzCraftClient.QuestionServiceReference.Question GetQuestionById(int questionId) {
            return base.Channel.GetQuestionById(questionId);
        }
        
        public System.Threading.Tasks.Task<QuizzCraftClient.QuestionServiceReference.Question> GetQuestionByIdAsync(int questionId) {
            return base.Channel.GetQuestionByIdAsync(questionId);
        }
        
        public string UpdateQuestion(QuizzCraftClient.QuestionServiceReference.Question question) {
            return base.Channel.UpdateQuestion(question);
        }
        
        public System.Threading.Tasks.Task<string> UpdateQuestionAsync(QuizzCraftClient.QuestionServiceReference.Question question) {
            return base.Channel.UpdateQuestionAsync(question);
        }
        
        public void DeleteQuestion(int questionId) {
            base.Channel.DeleteQuestion(questionId);
        }
        
        public System.Threading.Tasks.Task DeleteQuestionAsync(int questionId) {
            return base.Channel.DeleteQuestionAsync(questionId);
        }
    }
}
